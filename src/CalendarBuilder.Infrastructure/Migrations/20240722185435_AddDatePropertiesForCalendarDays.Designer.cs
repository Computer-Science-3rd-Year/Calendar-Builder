// <auto-generated />
using System;
using CalendarBuilder.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CalendarBuilder.Infrastructure.Migrations
{
    [DbContext(typeof(CalendarBuilderDbContext))]
    [Migration("20240722185435_AddDatePropertiesForCalendarDays")]
    partial class AddDatePropertiesForCalendarDays
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("CalendarDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AfterNoonSessionSportId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("MorningSessionSportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AfterNoonSessionSportId");

                    b.HasIndex("CalendarId");

                    b.HasIndex("MorningSessionSportId");

                    b.ToTable("CalendarDays");
                });

            modelBuilder.Entity("CoincidenceRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstSportId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SecondSportId")
                        .HasColumnType("uuid");

                    b.Property<int>("SessionsGap")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("FirstSportId");

                    b.HasIndex("SecondSportId");

                    b.ToTable("CoincidenceRestrictions");
                });

            modelBuilder.Entity("QuantityRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("SportId");

                    b.ToTable("QuantityRestrictions");
                });

            modelBuilder.Entity("Sport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("CalendarDay", b =>
                {
                    b.HasOne("Sport", "AfterNoonSessionSport")
                        .WithMany()
                        .HasForeignKey("AfterNoonSessionSportId");

                    b.HasOne("Calendar", "Calendar")
                        .WithMany("CalendarDays")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport", "MorningSessionSport")
                        .WithMany()
                        .HasForeignKey("MorningSessionSportId");

                    b.Navigation("AfterNoonSessionSport");

                    b.Navigation("Calendar");

                    b.Navigation("MorningSessionSport");
                });

            modelBuilder.Entity("CoincidenceRestriction", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport", "FirstSport")
                        .WithMany()
                        .HasForeignKey("FirstSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport", "SecondSport")
                        .WithMany()
                        .HasForeignKey("SecondSportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("FirstSport");

                    b.Navigation("SecondSport");
                });

            modelBuilder.Entity("QuantityRestriction", b =>
                {
                    b.HasOne("Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Calendar", b =>
                {
                    b.Navigation("CalendarDays");
                });
#pragma warning restore 612, 618
        }
    }
}
